{
  "errors": [],
  "warnings": [],
  "version": "4.8.3",
  "hash": "f1c2c6a0f94a2a227b82",
  "time": 10,
  "builtAt": 1527111099781,
  "publicPath": "",
  "outputPath": "/home/gka/projects/newsriver/.sapper",
  "assetsByChunkName": {
    "service-worker": "service-worker.js"
  },
  "assets": [
    {
      "name": "service-worker.js",
      "size": 7695,
      "chunks": [
        "service-worker"
      ],
      "chunkNames": [
        "service-worker"
      ],
      "emitted": true
    }
  ],
  "filteredAssets": 0,
  "entrypoints": {
    "service-worker": {
      "chunks": [
        "service-worker"
      ],
      "assets": [
        "service-worker.js"
      ],
      "children": {},
      "childAssets": {}
    }
  },
  "namedChunkGroups": {
    "service-worker": {
      "chunks": [
        "service-worker"
      ],
      "assets": [
        "service-worker.js"
      ],
      "children": {},
      "childAssets": {}
    }
  },
  "chunks": [
    {
      "id": "service-worker",
      "rendered": true,
      "initial": true,
      "entry": true,
      "size": 3131,
      "names": [
        "service-worker"
      ],
      "files": [
        "service-worker.js"
      ],
      "hash": "6385d3af28ee4b662dc3",
      "siblings": [],
      "parents": [],
      "children": [],
      "childrenByOrder": {},
      "modules": [
        {
          "id": "./app/manifest/service-worker.js",
          "identifier": "/home/gka/projects/newsriver/app/manifest/service-worker.js",
          "name": "./app/manifest/service-worker.js",
          "index": 1,
          "index2": 0,
          "size": 726,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            "service-worker"
          ],
          "issuer": "/home/gka/projects/newsriver/app/service-worker.js",
          "issuerId": "./app/service-worker.js",
          "issuerName": "./app/service-worker.js",
          "issuerPath": [
            {
              "id": "./app/service-worker.js",
              "identifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "name": "./app/service-worker.js"
            }
          ],
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony side effect evaluation",
              "userRequest": "./manifest/service-worker.js",
              "loc": "1:0-80"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "3:23-32"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "7:17-22"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "7:30-36"
            },
            {
              "moduleId": "./app/service-worker.js",
              "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
              "module": "./app/service-worker.js",
              "moduleName": "./app/service-worker.js",
              "type": "harmony import specifier",
              "userRequest": "./manifest/service-worker.js",
              "loc": "66:19-28"
            }
          ],
          "providedExports": [
            "timestamp",
            "assets",
            "shell",
            "routes"
          ],
          "optimizationBailout": [],
          "depth": 1,
          "source": "// This file is generated by Sapper â€” do not edit it!\nexport const timestamp = 1527111099559;\n\nexport const assets = [\n\t\"favicon.png\",\n\t\"global.css\",\n\t\"manifest.json\",\n\t\"svelte-logo-192.png\",\n\t\"svelte-logo-512.png\"\n];\n\nexport const shell = [\n\t\"client/a43a9703879931282ae8/_._.js\",\n\t\"client/a43a9703879931282ae8/_4xx._4xx.js\",\n\t\"client/a43a9703879931282ae8/_5xx._5xx.js\",\n\t\"client/a43a9703879931282ae8/feeds_$slug$.feeds_$slug$.js\",\n\t\"client/a43a9703879931282ae8/main.js\",\n\t\"client/a43a9703879931282ae8/0.0.js\",\n\t\"client/a43a9703879931282ae8/vendors~feeds_$slug$.vendors~feeds_$slug$.js\",\n\t\"client/feeds_$slug$.decf8c257b804e1d1c94.hot-update.js\",\n\t\"client/decf8c257b804e1d1c94.hot-update.json\"\n];\n\nexport const routes = [\n\t\n];"
        },
        {
          "id": "./app/service-worker.js",
          "identifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "name": "./app/service-worker.js",
          "index": 0,
          "index2": 1,
          "size": 2405,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            "service-worker"
          ],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": null,
              "moduleIdentifier": null,
              "module": null,
              "moduleName": null,
              "type": "single entry",
              "userRequest": "/home/gka/projects/newsriver/app/service-worker",
              "loc": "service-worker"
            }
          ],
          "providedExports": [],
          "optimizationBailout": [],
          "depth": 0,
          "source": "import { timestamp, assets, shell, routes } from './manifest/service-worker.js';\n\nconst ASSETS = `cache${timestamp}`;\n\n// `shell` is an array of all the files generated by webpack,\n// `assets` is an array of everything in the `assets` directory\nconst to_cache = shell.concat(assets);\nconst cached = new Set(to_cache);\n\nself.addEventListener('install', event => {\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(ASSETS)\n\t\t\t.then(cache => cache.addAll(to_cache))\n\t\t\t.then(() => {\n\t\t\t\tself.skipWaiting();\n\t\t\t})\n\t);\n});\n\nself.addEventListener('activate', event => {\n\tevent.waitUntil(\n\t\tcaches.keys().then(async keys => {\n\t\t\t// delete old caches\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key !== ASSETS) await caches.delete(key);\n\t\t\t}\n\n\t\t\tself.clients.claim();\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tif (event.request.method !== 'GET') return;\n\n\tconst url = new URL(event.request.url);\n\n\t// don't try to handle e.g. data: URIs\n\tif (!url.protocol.startsWith('http')) return;\n\n\t// ignore dev server requests\n\tif (url.hostname === self.location.hostname && url.port !== self.location.port) return;\n\n\t// always serve assets and webpack-generated files from cache\n\tif (url.host === self.location.host && cached.has(url.pathname)) {\n\t\tevent.respondWith(caches.match(event.request));\n\t\treturn;\n\t}\n\n\t// for pages, you might want to serve a shell `index.html` file,\n\t// which Sapper has generated for you. It's not right for every\n\t// app, but if it's right for yours then uncomment this section\n\t/*\n\tif (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {\n\t\tevent.respondWith(caches.match('/index.html'));\n\t\treturn;\n\t}\n\t*/\n\n\t// for everything else, try the network first, falling back to\n\t// cache if the user is offline. (If the pages never change, you\n\t// might prefer a cache-first approach to a network-first one.)\n\tevent.respondWith(\n\t\tcaches\n\t\t\t.open(`offline${timestamp}`)\n\t\t\t.then(async cache => {\n\t\t\t\ttry {\n\t\t\t\t\tif (event.request.cache === 'only-if-cache') {\n\t\t\t\t\t\t// workaround Chrome devtools bug https://github.com/sveltejs/sapper-template/issues/34\n\t\t\t\t\t\tevent.request.mode = 'same-origin';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst response = await fetch(event.request);\n\t\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t\t\treturn response;\n\t\t\t\t} catch(err) {\n\t\t\t\t\tconst response = await cache.match(event.request);\n\t\t\t\t\tif (response) return response;\n\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t);\n});\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "module": "",
          "moduleIdentifier": "",
          "moduleName": "",
          "loc": "service-worker",
          "request": "/home/gka/projects/newsriver/app/service-worker",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": "./app/manifest/service-worker.js",
      "identifier": "/home/gka/projects/newsriver/app/manifest/service-worker.js",
      "name": "./app/manifest/service-worker.js",
      "index": 1,
      "index2": 0,
      "size": 726,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        "service-worker"
      ],
      "issuer": "/home/gka/projects/newsriver/app/service-worker.js",
      "issuerId": "./app/service-worker.js",
      "issuerName": "./app/service-worker.js",
      "issuerPath": [
        {
          "id": "./app/service-worker.js",
          "identifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "name": "./app/service-worker.js"
        }
      ],
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony side effect evaluation",
          "userRequest": "./manifest/service-worker.js",
          "loc": "1:0-80"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "3:23-32"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "7:17-22"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "7:30-36"
        },
        {
          "moduleId": "./app/service-worker.js",
          "moduleIdentifier": "/home/gka/projects/newsriver/app/service-worker.js",
          "module": "./app/service-worker.js",
          "moduleName": "./app/service-worker.js",
          "type": "harmony import specifier",
          "userRequest": "./manifest/service-worker.js",
          "loc": "66:19-28"
        }
      ],
      "providedExports": [
        "timestamp",
        "assets",
        "shell",
        "routes"
      ],
      "optimizationBailout": [],
      "depth": 1,
      "source": "// This file is generated by Sapper â€” do not edit it!\nexport const timestamp = 1527111099559;\n\nexport const assets = [\n\t\"favicon.png\",\n\t\"global.css\",\n\t\"manifest.json\",\n\t\"svelte-logo-192.png\",\n\t\"svelte-logo-512.png\"\n];\n\nexport const shell = [\n\t\"client/a43a9703879931282ae8/_._.js\",\n\t\"client/a43a9703879931282ae8/_4xx._4xx.js\",\n\t\"client/a43a9703879931282ae8/_5xx._5xx.js\",\n\t\"client/a43a9703879931282ae8/feeds_$slug$.feeds_$slug$.js\",\n\t\"client/a43a9703879931282ae8/main.js\",\n\t\"client/a43a9703879931282ae8/0.0.js\",\n\t\"client/a43a9703879931282ae8/vendors~feeds_$slug$.vendors~feeds_$slug$.js\",\n\t\"client/feeds_$slug$.decf8c257b804e1d1c94.hot-update.js\",\n\t\"client/decf8c257b804e1d1c94.hot-update.json\"\n];\n\nexport const routes = [\n\t\n];"
    },
    {
      "id": "./app/service-worker.js",
      "identifier": "/home/gka/projects/newsriver/app/service-worker.js",
      "name": "./app/service-worker.js",
      "index": 0,
      "index2": 1,
      "size": 2405,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        "service-worker"
      ],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": null,
          "moduleIdentifier": null,
          "module": null,
          "moduleName": null,
          "type": "single entry",
          "userRequest": "/home/gka/projects/newsriver/app/service-worker",
          "loc": "service-worker"
        }
      ],
      "providedExports": [],
      "optimizationBailout": [],
      "depth": 0,
      "source": "import { timestamp, assets, shell, routes } from './manifest/service-worker.js';\n\nconst ASSETS = `cache${timestamp}`;\n\n// `shell` is an array of all the files generated by webpack,\n// `assets` is an array of everything in the `assets` directory\nconst to_cache = shell.concat(assets);\nconst cached = new Set(to_cache);\n\nself.addEventListener('install', event => {\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(ASSETS)\n\t\t\t.then(cache => cache.addAll(to_cache))\n\t\t\t.then(() => {\n\t\t\t\tself.skipWaiting();\n\t\t\t})\n\t);\n});\n\nself.addEventListener('activate', event => {\n\tevent.waitUntil(\n\t\tcaches.keys().then(async keys => {\n\t\t\t// delete old caches\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key !== ASSETS) await caches.delete(key);\n\t\t\t}\n\n\t\t\tself.clients.claim();\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tif (event.request.method !== 'GET') return;\n\n\tconst url = new URL(event.request.url);\n\n\t// don't try to handle e.g. data: URIs\n\tif (!url.protocol.startsWith('http')) return;\n\n\t// ignore dev server requests\n\tif (url.hostname === self.location.hostname && url.port !== self.location.port) return;\n\n\t// always serve assets and webpack-generated files from cache\n\tif (url.host === self.location.host && cached.has(url.pathname)) {\n\t\tevent.respondWith(caches.match(event.request));\n\t\treturn;\n\t}\n\n\t// for pages, you might want to serve a shell `index.html` file,\n\t// which Sapper has generated for you. It's not right for every\n\t// app, but if it's right for yours then uncomment this section\n\t/*\n\tif (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {\n\t\tevent.respondWith(caches.match('/index.html'));\n\t\treturn;\n\t}\n\t*/\n\n\t// for everything else, try the network first, falling back to\n\t// cache if the user is offline. (If the pages never change, you\n\t// might prefer a cache-first approach to a network-first one.)\n\tevent.respondWith(\n\t\tcaches\n\t\t\t.open(`offline${timestamp}`)\n\t\t\t.then(async cache => {\n\t\t\t\ttry {\n\t\t\t\t\tif (event.request.cache === 'only-if-cache') {\n\t\t\t\t\t\t// workaround Chrome devtools bug https://github.com/sveltejs/sapper-template/issues/34\n\t\t\t\t\t\tevent.request.mode = 'same-origin';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst response = await fetch(event.request);\n\t\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t\t\treturn response;\n\t\t\t\t} catch(err) {\n\t\t\t\t\tconst response = await cache.match(event.request);\n\t\t\t\t\tif (response) return response;\n\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t);\n});\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}